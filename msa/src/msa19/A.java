package msa19;

public class A {
/*
 * 	Annot(어노테이션) ->thread -> sleep -> Join -> Yield
 * 
 * --------------------------------------------------------------------------------
 * 
 * 
 * 프로세스 : 동작중인 프로그램, 실행중인 프로그램 / 자원과 쓰레드가 있음
 * 		- 멀티 프로그래밍 : 단일 프로세서 시스템 상에서 멀티프로세스 관리하는 것
 *  	- 멀티 프로세싱 : 다중 프로세서 
 * 
 * 쓰레드 : 어떤 프로세스 내에서 실행되는 흐름의 단위 / 프로세스 내에서 실행되는 세부 작업 단위 (관리를 뺀 나머지)
 * 쓰레드 관리.. ▶  메소드나 객체에 대해 공유자원으로 사용 ( 임계영역 critical Section : 둘 이상의 스레드가 동시에 접근해서는 안되는 공유자원  [→ 동기화] )
 * 
 * 
 * [동기화] : 여러 쓰레드가 공유할 경우 하나의 쓰레드가 완료 된 후 다음 쓰레드에게 사용권한을 주는 것이 안전.  (은행 입출금)
 *		┗ 동기화 처리 : 메소드나 객체에 Synchronized를 붙이는 경우
 * [비동기] : (학생 시험 -> 교수 채점 후 -> 학생에게 돌려주기)
 * 
 * 
 * [Thread] 
 *  동작 중인 것을  ▶ runnable상태 (큐에 넣음)
 *  
 *  Thread.sleep(밀리초) : 밀리초동안 일시정지 (시간이 지나면 알아서 동작)
 *  wait : 무한 일시정지
 *  notify : 다시 동작  
 *  객체.start() : run()메소드 자동 호출 
 *  join : 내가 먼저 들어와서 동작
 * 	yield : 양보(너가 먼저 처리해)
 * 
 */
}
